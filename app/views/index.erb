<p># Sinatra Playlister</p>

<p>## Objectives</p>

<p>- Solidify your ActiveRecord understanding
- Build out basic views for all your models
- Create forms for editing and creating a new song that returns a
  well-structured params hash</p>

<p>## Overview</p>

<p>In the theme of moving from a simple command line application static website to
dynamic web app, it's time to move Playlister to the interwebs using Sinatra. In
this lab, you'll be:

1.  Giving our "library" of songs a dynamic web interface

2.  Creating a few complex forms that allow you to create and edit Artists,
    Songs and Genres.</p>

<p>## File Structure</p>

<p>Your application should use the following file structure. Notice how there are
separate controllers for songs, artists, and genres. Separately, we have
sub-directories for views for songs, artists, and genres.</p>

```<br>
├── app<br>
│   ├── controllers<br>
│   │   ├── application_controller.rb<br>
│   │   ├── artists_controller.rb<br>
│   │   ├── genres_controller.rb<br>
│   │   └── songs_controller.rb<br>
│   ├── models<br>
│   │   ├── artist.rb<br>
│   │   ├── concerns<br>
│   │   │   └── slugifiable.rb<br>
│   │   ├── genre.rb<br>
│   │   ├── song.rb<br>
│   │   └── song_genre.rb<br>
│   └── views<br>
│       ├── artists<br>
│       │   ├── index.erb<br>
│       │   └── show.erb<br>
│       ├── genres<br>
│       │   ├── index.erb<br>
│       │   └── show.erb<br>
│       ├── index.erb<br>
│       ├── layout.erb<br>
│       └── songs<br>
│           ├── edit.erb<br>
│           ├── index.erb<br>
│           ├── new.erb<br>
│           └── show.erb<br>
```<br>

<p>## Instructions</p>

<p>The first thing you should aim to do is create a Sinatra interface for the data
in `db/data`. There is a `LibraryParser` class included in the `lib` folder that
you may use, though it may need some tweaking to work with your specific
application. Your associations should follow this pattern:</p>

<p>1.  An Artist can have multiple songs and multiple genres</p>

<p>2.  A Genre can have multiple artists and multiple songs</p>

<p>3.  A Song can belong to ONE Artist and multiple genres</p>

<p>4.  How would we implement the relationship of a song having many genres and
    genre having many songs? In order to establish a "many-to-many" relationship,
    we'll need a join table. You will need a `SongGenre` class to go along with this
    table in the database</p>

<p>You should build the following routes:</p>

<p>1.  `/songs`</p>

<p>- This should present the user with a list of all songs in the library.<br>
<p>- Each song should be a clickable link to that particular song's show page.</p>

<p>2.  `/genres`</p>

<p>- This should present the user with a list of all genres in the library.<br>
<p>- Each genre should be a clickable link to that particular genre's show page.</p>

<p>3.  `/artists`</p>

<p>- This should present the user with a list of all artists in the library.<br>
<p>- Each artist should be a clickable link to that particular artist's show page.</p>

<p>4.  `/songs/:slug`</p>

<p>- Any given song's show page should have links to that song's artist and
  each genre associated with the song.</p>
<p>- Pay attention to the order of `/songs/new` and `/songs/:slug`. The route
  `/songs/new` could interpret `new` as a slug if that controller action isn't
  defined first.</p>

<p>5.  `/artists/:slug`</p>

<p>- Any given artist's show page should have links to each of his or her songs
  and genres.</p>

<p>6.  `/genres/:slug`</p>

<p>- Any given genre's show page should have links to each of its artists and
  songs.</p>

<p>To get the data into your database, you will want to figure out how to use your
`LibraryParser` class in the `db/seeds.rb` file.</p>

<p>## How to Approach This Lab</p>

<p>Get the basics of the app working first, which means we have five specs in total
and you should first pass all three model specs.</p>

<p>By typing</p>

<p>```bash</p>
<p>rspec spec/models/01_artist_spec.rb</p>
<p>```</p>

<p>in your bash/ command line you will only run that spec. It is important to run
the specs in their numeric order. You will notice even after adding a table,
model, and controller your specs are still not passing, but the error messages
are changing. You have to read every error message carefully to understand what
to do next.</p>

<p>For the last spec `05_song_form_spec.rb` you need to implement the following features:</p>

<p>1.  `/songs/new`</p>

<p> Be able to create a new song</p>
<p>- Genres should be presented as checkboxes</p>
<p>- Be able to enter the Artist's name in a text field (only one Artist per song.)</p>

<p>2.  `/songs/:slug/edit`</p>

<p><p>- Be able to change everything about a song, including the genres associated
  with it and its artist.</p>

<p>Think about the custom writer or writers you may need to write to make these
features work.</p>

<p>## Fixing Migration Errors</p>

<p>While creating your databases, if you make a mistake or want to edit your
migrations, you can use `rake db:drop` to drop any tables that have been
created.</p>

<p>If you're having issues while trying to re-migrate, you can also delete
`schema.rb` and any files with the extension `.sqlite` inside the `db` folder.
Running `rake db:migrate` will recreate these files.</p>

<p>## Slugs</p>

<p>Having a URL like `/songs/1` sort of sucks. Imagine trying to email that song to
a friend. They would literally have no idea what the song would be until they
click the link. You could be sending them literally anything. It would be much
better to have a URL like `/songs/hot line bling`.</p>

<p>But again, we run into a problem here. We can't have spaces in a URL. In order
to make it a proper URL, we have to convert the spaces to `-` in the song name.
This is called a slug.</p>

<p>You are going to need to create some slugs in this lab. A slug is used to replace
a name that is not acceptable as a URL for various reasons (special characters,
spaces, etc). This is great because instead of having a route like `/songs/1`,
you can have a route `/songs/hotline-bling` which is a much more descriptive
route name.</p>

<p>Each class you build will need to have a method to slugify each object's name.
This means you'll need to strip out any special characters, and replace all
spaces with `-`.</p>

<p>You'll need to build a method `slug` which takes a given song/artist/genre name
and create the "slugified" version.</p>

<p>The `find_by_slug` method should use the `slug` method to retrieve a
song/artist/genre from the database and return that entry.</p>

<p>## Check Boxes</p>

<p>In order to create a check box of all the genres on a new song form, you'll need
to iterate over all the Genres in the database. From there, you'll want to set
the genre name as the ID of the input tag.</p>

The value attribute should be set to the genre id.</p>

<p><p>The name attribute should be set to `genres[]` because we're dealing with a
collection of attributes. This will make the params hash look like this:</p>

<p>#```ruby
#params = {
#  genres => [ genre1, genre2, genre2]
#}
#```</p>

#```html
#<% Genre.all.each do |genre| %>
#  <input id="<%= genre.name %>" type="checkbox" name="genres[]" value="<%= genre.id %>">
#<% end %>
#```</p>

<p>## Flash Message</p>

<p>You can add a flash message for when a new instance is created. Let's take a new
song creation as an example.</p>

First, add `gem 'rack-flash3'` to the Gemfile; run `bundle` to install it.</p>

<p><p>You can see in Rack Flash's [Sinatra](https://github.com/treeder/rack-flash#sinatra)
section the basics for getting flash messages working with Sinatra.</p>

<p>(Note: You'll need to `enable :sessions` for your application and `use Rack::Flash`
in the appropriate controller.)</p>

<p>Require `rack-flash` to the top of the appropriate controller. If this is missed you will receive a `NameError: uninitialized constant Rack::Flash` message.</p>

<p>You'll want to add a flash message to the `post '/songs'` and
`patch '/songs/:slug'` actions. `post '/songs'` might look something like:</p>

<p>```ruby
post '/songs' do
  # ...
  # ^ code for creating and saving a new song
  flash[:message] = "Successfully created song."
  redirect to("/songs/#{@song.slug}")
end
```</p>

To display this message in the view, just add</p>

```html
<!-- views/songs/show.erb -->

<% if flash.has?(:message) %>
  <%= flash[:message] %>
<% end %>
```

<p>to the top of the view.</p>

<p>## A Note on the Database</p>

<p>Remember too that you can drop and recreate your database as much as you need
to. If you hit a jam, just reset the db, run migrations, and pick up where you
left off.</p>

<p>## Resources</p>

<p>- [Clean URL - Slugs](<http://en.wikipedia.org/wiki/Slug_(web_publishing)#Slug>)</p>

 <p>data-visibility='hidden'>View <a href='https://learn.co/lessons/playlister-sinatra' title='Sinatra Playlister'>Sinatra Playlister</a> on Learn.co and start learning to code for free.</p>
</p>

